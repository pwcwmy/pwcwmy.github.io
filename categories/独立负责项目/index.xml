<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>独立负责项目 on Peter Pan</title>
        <link>https://pwcwmy.github.io/categories/%E7%8B%AC%E7%AB%8B%E8%B4%9F%E8%B4%A3%E9%A1%B9%E7%9B%AE/</link>
        <description>Recent content in 独立负责项目 on Peter Pan</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Peter Pan</copyright>
        <lastBuildDate>Tue, 14 Jan 2025 23:55:14 +0800</lastBuildDate><atom:link href="https://pwcwmy.github.io/categories/%E7%8B%AC%E7%AB%8B%E8%B4%9F%E8%B4%A3%E9%A1%B9%E7%9B%AE/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>如何一个人独立负责项目</title>
        <link>https://pwcwmy.github.io/p/%E5%A6%82%E4%BD%95%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E8%B4%9F%E8%B4%A3%E9%A1%B9%E7%9B%AE/</link>
        <pubDate>Tue, 14 Jan 2025 23:55:14 +0800</pubDate>
        
        <guid>https://pwcwmy.github.io/p/%E5%A6%82%E4%BD%95%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E8%B4%9F%E8%B4%A3%E9%A1%B9%E7%9B%AE/</guid>
        <description>&lt;img src="https://pwcwmy.github.io/p/%E5%A6%82%E4%BD%95%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E8%B4%9F%E8%B4%A3%E9%A1%B9%E7%9B%AE/index.jpg" alt="Featured image of post 如何一个人独立负责项目" /&gt;&lt;h3 id=&#34;一一个程序员如何独立负责一个完整项目的过程从需求的产生到项目的设计和实施以及对团队成员的责任和对接&#34;&gt;一、一个程序员如何独立负责一个完整项目的过程，从需求的产生到项目的设计和实施，以及对团队成员的责任和对接。
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序员被上级分配了一个完整的项目&lt;/li&gt;
&lt;li&gt;需求评估后，项目会立项，有排期后才会到负责人手中&lt;/li&gt;
&lt;li&gt;接手项目后，要进行设计讨论阶段，考虑大方向和细节，需要进行调研和技术选择&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二作为项目负责人需要对项目中各个组件和客户端进行编写和设计包括架构api异常处理等以保证项目正常运作&#34;&gt;二、作为项目负责人需要对项目中各个组件和客户端进行编写和设计，包括架构、API、异常处理等，以保证项目正常运作。
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要通过调研和编写组件客户端来证明项目可行性&lt;/li&gt;
&lt;li&gt;需要提前设计和搭建服务架构，让其他人专注于业务编写&lt;/li&gt;
&lt;li&gt;需要提前设计和确认项目中统一处理的异常和错误码，以及过滤器和拦截器的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三软件开发过程中的一些重要问题如对业务的理解要一致注意代码结构和抽象开发和测试要对齐等&#34;&gt;三、软件开发过程中的一些重要问题，如对业务的理解要一致、注意代码结构和抽象、开发和测试要对齐等。
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;理解业务一致（对业务字段和状态语义理解高度相同），否则程序编码麻烦&lt;/li&gt;
&lt;li&gt;开发环节不重要，但要注意代码结构和抽象&lt;/li&gt;
&lt;li&gt;开发后需要部署，但不是正式部署，要和上级沟通避免问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四在测试环境中部署时需要进行的确认工作包括端口url安装步骤环境配置脚本库等方面的细节管理以确保功能的正常使用&#34;&gt;四、在测试环境中部署时需要进行的确认工作，包括端口、URL、安装步骤、环境配置、脚本、库等方面的细节管理，以确保功能的正常使用。
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;测试环境的部署不需要自己做，有运维人员处理。&lt;/li&gt;
&lt;li&gt;NGINX的端口和URL要正确，网络转发可能有问题。&lt;/li&gt;
&lt;li&gt;确认组件之间的网络关系和物理结构，配置要细致管理。（比如docker compose / 运维脚本 / 安装脚本）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五一个人独立负责一个项目的过程包括设计联调评审体测性能测试和上线等阶段以及需要注意的事项&#34;&gt;五、一个人独立负责一个项目的过程，包括设计、联调、评审、体测、性能测试和上线等阶段，以及需要注意的事项。
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;项目决定后部署测试环境，联调过程中进行细节修改&lt;/li&gt;
&lt;li&gt;设计阶段需要方向大，逐渐开发中可能发生变化&lt;/li&gt;
&lt;li&gt;通过评审和性能测试后上线，进行维护和新需求开发（devops）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;六单独对设计阶段进行重点攻关接口设计模型设计对象设计部署图关键业务时序图特别复杂的要有状态图开发框架冒烟用例&#34;&gt;六、单独对设计阶段进行重点攻关：接口设计、模型设计、对象设计、部署图、关键业务时序图、特别复杂的要有状态图。开发框架，冒烟用例。
&lt;/h3&gt;&lt;p&gt;首先，介绍下我对细节的理解。细节是具体到方法体内的代码的编写，或者说具体的算法。
工期的预估，分开基本curd接口和复杂接口，根据实力估计多长时间可做完。
设计阶段，得简单的想想细节如何做，才能设计好。
只有设计完成后，才能开始写代码，不然拒绝启动代码编写。
设计，需要做些什么？就是概要设计和详细设计那些，但可以选择不去设计到类。一些业务时序可以省掉，只做关键的，不关键的，可以口述。
具体设计，可以自己用需求用例梳理交互，最终做出接口设计（需求用例就不用放到设计文档中，自己看就好），数据库模型，redis key 读 写 更新规则，mq 生产 消费，elasticsearch 索引设计，对象关系，关键业务时序，部署图，开发框架搭建。
接口 数据库模型 对象关系 这3个一般最先做一版，接口和模型谁先谁后 关系不大，对象关系会靠后点。然后是关键业务时序，复杂点的逻辑可能还需要先来个 状态图。部署图。
接口、模型、对象、部署图 这几个静态图，配合 状态图、关键业务时序图 这几个动态图，动静结合 + 具体实现的想象，互相磨合 改来改去 ，最终出设计结果。
也就是最终设计的文档包含，接口设计、模型设计、对象设计、部署图、关键业务时序图、特别复杂的要有状态图。开发框架。7个东西。5天内搞定。成熟度更好点的团队，可以出点冒烟用例，方便编写完代码后的自测。也就是8个东西 需要设计阶段搞出来。
其中时序图和状态图 根据团队情况 选择哪些出图，哪些只需要口述。&lt;/p&gt;
&lt;p&gt;设计阶段那8个 根据团队的成员实力，可能出不全。那就降低质量，比如接口设计、模型 一定要先保证，但因为没有动态图的思考，有很大概率会导致后续实现时 会改变接口、模型的设计，这是风险点。
还有很多代码实现完，再考虑部署环境，那么 也会有修改代码算法，甚至需要修改接口 模型 这些设计的情况。这样工期就更难保证。
总之，都想好后，再编写代码算法，是最好的方式。关键是如何想好，如何确定已经想好了。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
